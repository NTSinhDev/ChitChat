import 'dart:async';
import 'dart:developer';

import 'package:chat_app/utils/enums.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:rxdart/rxdart.dart';

import 'package:chat_app/data/repositories/injector.dart';
import 'package:chat_app/models/injector.dart';
import 'package:chat_app/services/injector.dart';
import 'package:chat_app/utils/constants.dart';
import 'package:chat_app/view_model/injector.dart';

class ChatBloc extends Bloc<ChatEvent, ChatState> {
  // Original data
  List<Message> _messages = [];
  final String serverKey;
  final UserProfile currentUser;
  final UserProfile friend;
  Conversation? conversation;
  // Repositories to query data
  final _messageRepository = MessagesRepository();
  final _conversationRepository = ConversationsRepository();
  // Stream data
  final _behaviorSendStatus = BehaviorSubject<MessageStatus>();
  Stream<MessageStatus> get lstMsgStatusStream => _behaviorSendStatus.stream;
  final _behaviorSeenStatus = BehaviorSubject<MessageStatus>();
  Stream<MessageStatus> get seenStatusStream => _behaviorSeenStatus.stream;
  final BehaviorSubject<List<Message>> _behaviorMessages = BehaviorSubject();
  Stream<List<Message>> get messagesStream => _behaviorMessages.stream;

  ChatBloc({
    required this.currentUser,
    required this.conversation,
    required this.friend,
    required this.serverKey,
  }) : super(InitChatState()) {
    _getMessageList();
    _markMessagesAsSeen();
    on<SendMessageEvent>((event, emit) async {
      // Ki·ªÉm tra cu·ªôc h·ªôi tho·∫°i n·∫øu ch∆∞a t·ªìn t·∫°i th√¨ t·∫°o m·ªõi.
      final message = event.type == MessageType.text
          ? event.message
          : "ƒë√£ g·ª≠i ${event.files.length} t·ªáp";
      final hasConversation = await _createConversationIfNull(message: message);
      // T·∫°o m·ªõi m·ªôt ƒë·ªëi t∆∞·ª£ng tin nh·∫Øn n·∫øu cu·ªôc h·ªôi tho·∫°i ƒë√£ c√≥.
      if (hasConversation.isCreate == false) return;
      Message messageModel = await _messageRepository.remote.createMessageModel(
        senderID: currentUser.profile!.id!,
        conversationID: conversation!.id!,
        messageContent: event.message,
        images: event.files,
        messageType: event.type,
        messageStatus: MessageStatus.sending,
      );
      /* 
      - Th√™m tin nh·∫Øn v√†o stream.
      - ƒê·∫∑t tr·∫°ng th√°i g·ª≠i l√† ƒëang g·ª≠i
      - G·ª≠i tin nh·∫Øn.
      */
      _messages = _behaviorMessages.value;
      _messages.add(messageModel);
      _behaviorMessages.sink.add(_messages);
      _behaviorSendStatus.sink.add(MessageStatus.sending);
      final isSend = await Future.delayed(
        const Duration(seconds: 2),
        () async {
          log('üöÄlog‚ö° go');
          return await _messageRepository.remote
              .sendMessage(messageModel: messageModel);
        },
      );
      /*
      N·∫øu g·ª≠i th·∫•t b·∫°i:
        - Thay ƒë·ªïi trang th√°i g·ª≠i l√† kh√¥ng g·ª≠i ƒë∆∞·ª£c
        - K·∫øt th√∫c t√°c v·ª•.
       */
      if (!isSend) {
        int index = _messages.indexOf(messageModel);
        messageModel.messageStatus = MessageStatus.notSend.toString();
        _messages.replaceRange(index, index + 1, [messageModel]);
        return _behaviorMessages.sink.add(_messages);
      }
      /*
      N·∫øu g·ª≠i th√†nh c√¥ng: 
        - Thay ƒë·ªïi tr·∫°ng th√°i g·ª≠i l√† ƒë√£ g·ª≠i.
        - C·∫≠p nh·∫≠t l·∫°i th√¥ng tin cu·ªôc h·ªôi tho·∫°i.
      */
      _behaviorSendStatus.sink.add(MessageStatus.sent);
      if (hasConversation.isUpdate == false) {
        final result = await _conversationRepository.remote.updateConversation(
          id: conversation!.id!,
          data: {
            ConversationsField.lastText: message,
            ConversationsField.listUser: _listUser(),
            ConversationsField.readByUsers: _readByUsers(),
            ConversationsField.stampTimeLastText:
                DateTime.now().millisecondsSinceEpoch,
          },
        );
        if (!result) return;
      }
      /*
      G·ª≠i th√¥ng b√°o ƒë·∫øn thi·∫øt b·ªã c·ªßa b·∫°n th√¥ng qua FCM
      */
      if (friend.profile != null && friend.profile!.messagingToken != null) {
        await FCMHanlder.sendMessage(
          conversationID: conversation?.id ?? '',
          userProfile: currentUser.profile!,
          friendProfile: friend.profile!,
          message: message,
          apiKey: serverKey,
        );
      }
    });
  }

  Stream<String?> getFile({required String fileName}) {
    return _messageRepository.remote.getFile(
      conversationID: conversation!.id!,
      senderID: currentUser.profile!.id!,
      fileName: fileName,
    );
  }

  Future<_CheckConversation> _createConversationIfNull({
    required String message,
  }) async {
    final check = _CheckConversation(isCreate: true, isUpdate: false);
    if (conversation != null) return check;

    final userIDs = [currentUser.profile!.id!, friend.profile!.id!];
    conversation = await _conversationRepository.remote.createNewConversation(
      userIDs: userIDs,
      lastMsg: message,
    );
    if (conversation == null) {
      check.updateIsCreate(false);
      return check;
    }
    check.updateIsUpdate(true);
    return check;
  }

  _getMessageList() async {
    if (conversation == null) return;
    /**
     * T·∫£i d·ªØ li·ªáu ngo·∫°i tuy·∫øn.
     * Sau ƒë√≥ add v√†o BehaviorSubject
     * */
    final offlineMessages = await _messageRepository.local.getMessageList(
      conversationId: conversation!.id!,
    );
    _behaviorMessages.sink.add(offlineMessages);
    /**
     * C·∫≠p nh·∫≠t _behaviorMessages t·ª´ firebase
     * C√°c tr∆∞·ªùng h·ª£p c·∫≠p nh·∫≠t: t·∫£i d·ªØ li·ªáu khi tham gia ph√≤ng, t·∫£i d·ªØ li·ªáu khi 
     * c√≥ ng∆∞·ªùi nh·∫Øn v√† t·∫£i d·ªØ li·ªáu khi tin nh·∫Øn ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng...
     */
    _messageRepository.remote
        .getMessageList(conversationId: conversation!.id!)
        .listen((messages) async {
      final datas = messages.toList();
      if (datas != offlineMessages) _behaviorMessages.sink.add(datas);
    });
  }

  _markMessagesAsSeen() async {
    _behaviorMessages.listen((messages) async {
      for (var i = 0; i < messages.length; i++) {
        if (messages[i].senderId != currentUser.profile!.id! &&
            messages[i].messageStatus != MessageStatus.viewed.toString()) {
          await _messageRepository.remote.markSeen(message: messages[i]);
        }
      }
    });
  }

  Future<void> _saveData() async {
    final messagesData = _behaviorMessages.value;
    for (Message m in messagesData) {
      await _messageRepository.local.createMessage(message: m);
    }
    log('‚úîüü¢ ƒê√£ l∆∞u tin nh·∫Øn xong');
  }

  @override
  Future<void> close() async {
    await _saveData().then((v) async {
      await _behaviorMessages.drain();
      await _behaviorMessages.close();
    });
    return super.close();
  }

  List<String> _listUser() {
    if (conversation!.listUser.length == 1) {
      return conversation!.listUser;
    }
    return [currentUser.profile!.id!, friend.profile!.id!];
  }

  List<String> _readByUsers() {
    final a = conversation!.readByUsers
        .where((id) => id == currentUser.profile!.id!)
        .toList();
    if (a.isEmpty) {
      conversation!.readByUsers.add(currentUser.profile!.id!);
    }
    return conversation!.readByUsers;
  }
}

class _CheckConversation {
  bool isCreate;
  bool isUpdate;
  _CheckConversation({
    required this.isCreate,
    required this.isUpdate,
  });
  updateIsCreate(bool newValue) => isCreate = newValue;
  updateIsUpdate(bool newValue) => isUpdate = newValue;
}
