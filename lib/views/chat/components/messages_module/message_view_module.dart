import 'dart:developer';

import 'package:chat_app/utils/convert.dart';
import 'package:chat_app/view_model/injector.dart';
import 'package:chat_app/views/chat/components/messages_module/components/injector.dart';
import 'package:chat_app/views/chat/components/messages_shimmer.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:chat_app/models/injector.dart';

class MessageViewModule extends StatelessWidget {
  const MessageViewModule({super.key});

  @override
  Widget build(BuildContext context) {
    final chat = context.read<ChatBloc>();
    return SingleChildScrollView(
      reverse: true,
      physics: const BouncingScrollPhysics(),
      padding: EdgeInsets.fromLTRB(10.w, 10.h, 0.h, 10.h),
      child: StreamBuilder<List<Message>>(
        stream: chat.messagesStream,
        builder: (context, snapshot) {
          if (snapshot.hasData) {
            return Column(
              children: _timeClusterWidgets(snapshot.data!),
            );
          }
          return Container();
        },
      ),
    );
  }

  List<Widget> _timeClusterWidgets(List<Message> data) {
    /*
    L·∫•y danh s√°ch c√°c c·ª•m tin nh·∫Øn theo m√≥c th·ªùi gian.
    Bi·∫øn timeClusters s·∫Ω l√† danh s√°ch c·ªßa c√°c danh s√°ch tin nh·∫Øn.
    Trong ƒë√≥ danh s√°ch c√°c tin nh·∫Øm l√† c·ª•m c√°c tin nh·∫Øn trong m·ªôt ng√†y.
    */
    final timeClusters = ChitChatConvert.convertToTimeClusters(messages: data);

    /*
    X√¢y d·ª±ng c√¢y widgets.
    C√¢y widget c√≥ d·∫°ng l·∫∑p l·∫°i theo th·ª© t·ª± sau: 
      1. Widget ch·ªâ m√≥c th·ªùi gian cu·ªôc h·ªôi tho·∫°i theo ng√†y.
      2. Widget ch·ª©a c√°c c·ª•m tin nh·∫Øn v·ªõi m·ªói c·ª•m l√† danh s√°ch tin nh·∫Øn c·ªßa m·ªôt ng∆∞·ªùi d√πng.   
    */
    List<Widget> timeClusterWidgets = [];
    for (var i = 0; i < timeClusters.length; i++) {
      // M√≥c th·ªùi gian
      final timeHook = TimeHookOfMessagesCluster(
        time: timeClusters[i].first.stampTime,
      );
      timeClusterWidgets.add(timeHook);

      // C√°c c·ª•m tin nh·∫Øn
      final messagesClustersData = ChitChatConvert.convertToMessagesClusters(
        messages: timeClusters[i],
      );
      final messagesClusterWidgets = getMessagesClusterWidgets(
        data: messagesClustersData,
        islast: i == timeClusters.length - 1,
      );
      timeClusterWidgets.add(messagesClusterWidgets);
    }
    return timeClusterWidgets;
  }

  Widget getMessagesClusterWidgets({
    required List<List<Message>> data,
    required bool islast,
  }) {
    List<Widget> widgets = [];
    for (var i = 0; i < data.length; i++) {
      widgets.add(MessagesCluster(
        messages: data[i],
        isLastCluster: islast,
      ));
    }
    log('üöÄlog‚ö° $widgets');
    return Column(children: widgets);
  }
}
